{"version":3,"sources":["Event.js","Alert.js","EventList.js","CitySearch.js","NumberOfEvents.js","config.js","api.js","Login.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","showDetails","handleShowDetails","setState","formatStartTime","time","props","event","start","dateTime","formattedStartTime","moment","format","className","formatEndTime","end","formattedEndTime","this","summary","location","onClick","description","organizer","email","Component","Alert","getStyle","color","style","text","InfoAlert","ErrorAlert","config","GET_AUTH","GET_TOKEN","GET_EVENTS","GOOGLE_API","LOCAL_HOST","extractLocations","events","map","Set","getEvents","a","NProgress","localStorage","getItem","setItem","JSON","stringify","lastEvents","window","href","startsWith","done","console","log","storedEvents","parse","token","removeQuery","url","Config","axios","get","result","data","locations","history","pushState","pathname","newurl","protocol","host","Login","App","updateEvents","eventCount","navigator","onLine","warningText","currentLocation","numberOfEvents","then","filteredEvents","filter","slice","componentDidMount","validToken","tokenCheck","searchParams","URLSearchParams","search","code","mounted","catch","e","error","getData","number","length","city","split","shift","handleShowCharts","showCharts","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","atatus","install"],"mappings":"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","file":"static/js/main.9f036f6f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport moment from 'moment';\r\n\r\nclass Event extends Component {\r\n    state = {\r\n        showDetails: false\r\n    };\r\n\r\n    // toggle button function\r\n    handleShowDetails = () => {\r\n        if(this.state.showDetails === false){\r\n            this.setState({ showDetails: true});\r\n        } else {\r\n            this.setState({ showDetails: false})\r\n        }\r\n    };\r\n\r\n    formatStartTime = () => {\r\n        const time = this.props.event.start.dateTime;\r\n        const formattedStartTime = moment(time).format('dddd, MMMM, Do YYYY, h:MM a');\r\n        return <span className='start-dateTime'>{`${formattedStartTime}`}</span>\r\n    }\r\n\r\n    formatEndTime = () => {\r\n        const time = this.props.event.end.dateTime;\r\n        const formattedEndTime = moment(time).format('dddd, MMMM, Do YYYY, h:MM a');\r\n        return <span className='start-dateTime'>{`${formattedEndTime}`}</span>\r\n    }\r\n\r\n    render() {\r\n        const showDetails = this.state.showDetails;\r\n        // passed event from Event.test.js as prop event={mockData}, no need to import it again in this component\r\n        const {event} = this.props;\r\n\r\n        return(\r\n            <div className='Event'>\r\n                <div className='event-collapsed'>\r\n                    <h3 className='event-name'>{event.summary}</h3>\r\n                    <p className='event-location'>{event.location}</p>\r\n                    {!showDetails && (\r\n                        <button className='details-btn' onClick={this.handleShowDetails}>\r\n                            See More\r\n                        </button>\r\n                    )}\r\n                    {showDetails && (\r\n                        <button className='details-btn' onClick={this.handleShowDetails}>\r\n                            See Less\r\n                        </button>\r\n                    )}\r\n                </div>\r\n                \r\n                {showDetails && (\r\n                    <div className='event-expanded'>\r\n                        <p className='event-start'><span className='time-label'>Starts @ </span>{this.formatStartTime()}</p>\r\n                        <p className='event-end'><span className='time-label'>Ends @ </span>{this.formatEndTime()}</p>\r\n                        <p className='event-description'>{event.description}</p>\r\n                        <p className='event-organizer'>Get in touch with us about this event at: <span className='org-email'>{event.organizer.email}</span></p>\r\n\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Event;\r\n","import React, { Component } from 'react';\r\n\r\nclass Alert extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.color = null;\r\n    }\r\n\r\n    getStyle = () => {\r\n        return {\r\n            color: this.color,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='Alert'>\r\n                <p style={this.getStyle()}>{this.props.text}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass InfoAlert extends Alert {\r\n    constructor(props) {\r\n        super(props);\r\n        this.color = '#7dd8ff';\r\n    }\r\n}\r\n\r\nclass ErrorAlert extends Alert {\r\n    constructor(props) {\r\n        super(props);\r\n        this.color = '#ff4343';\r\n    }\r\n}\r\n\r\n// no use for this right now, created for later implementation, maybe for offline warning use?\r\nclass WarningAlert extends Alert {\r\n    constructor(props) {\r\n        super(props);\r\n        this.color = 'orange';\r\n    }\r\n}\r\n\r\nexport {InfoAlert, ErrorAlert, WarningAlert};\r\n\r\n","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n    render(){\r\n        const { events } = this.props;\r\n        return(\r\n            <ul className='EventList'>\r\n                {events.map(event => \r\n                    <li key={event.id}>\r\n                        <Event event={event}/>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventList;","import React, { Component } from 'react';\r\nimport {InfoAlert} from './Alert';\r\n\r\nclass CitySearch extends Component {\r\n\r\n  state = {\r\n    query: '',\r\n    suggestions: [],\r\n    showSuggestions: undefined\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({showSuggestions: true});\r\n    // using this.props.location because we're passing it from App component later\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    if (suggestions.length === 0) {\r\n      this.setState({\r\n        query: value,\r\n        infoText: `Looks like we don't have any events in that city, try another!`\r\n      });\r\n    } else {\r\n      return this.setState({\r\n        query:value,\r\n        suggestions,\r\n        // showSuggestions: false,\r\n        infoText: ''\r\n      });\r\n    }\r\n  }\r\n\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion,\r\n      showSuggestions: false\r\n    });\r\n    this.props.updateEvents(suggestion);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='CitySearch'>\r\n        <InfoAlert text={this.state.infoText}/>\r\n\r\n        <input \r\n        type='text' \r\n        className='city' \r\n        value={this.state.query} \r\n        onChange={this.handleInputChanged}\r\n        onFocus={() => { this.setState({ showSuggestions: true})}}\r\n        />\r\n\r\n{/* if showSuggestions is true, list is visable, style won't have display: none, so list won't become visible */}\r\n        <ul className='suggestions' style={this.state.showSuggestions ? {}: {display: 'none'}}>\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li \r\n            key={suggestion}\r\n            onClick={() => this.handleItemClicked(suggestion)}\r\n            >\r\n              {suggestion}\r\n            </li>\r\n          ))}\r\n          <li onClick={() => this.handleItemClicked('all')}>\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;","import React, {Component} from 'react';\r\nimport {ErrorAlert} from './Alert';\r\n\r\nclass NumberOfEvents extends Component {\r\n\r\n    state = {\r\n        // default number of events\r\n        eventNumber: 12,\r\n    };\r\n\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        this.props.updateEvents(null, value);\r\n        if (value < 1 ){\r\n            this.setState({\r\n                eventNumber: value,\r\n                errorText: 'Please choose at least one event to view.'\r\n            });\r\n        } else {\r\n            return this.setState({\r\n                eventNumber: value,\r\n                errorText: ''\r\n            });\r\n        } \r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className='numberOfEvents'>\r\n                <ErrorAlert text={this.state.errorText} style={{margin: 0}}/>\r\n\r\n                <label className='eventNumberLabel'>Number of events/page:</label>\r\n                <input\r\n                type='number'\r\n                id='eventNumber'\r\n                className='eventNumber'\r\n                value={this.state.eventNumber}\r\n                onChange={this.handleInputChanged}\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NumberOfEvents;","const config = {\r\n\r\n    // GET_EVENTS: 'https://xixfiq7och.execute-api.ca-central-1.amazonaws.com/dev/api/get-events/',\r\n    // GET_TOKEN:'https://xixfiq7och.execute-api.ca-central-1.amazonaws.com/dev/api/token/',\r\n    // GET_AUTH:'https://xixfiq7och.execute-api.ca-central-1.amazonaws.com/dev/api/get-auth-url',\r\n        // GOOGLE_API: `https://www.googleapis.com/oauth2/v1/tokeninfo?`,\r\n        // LOCAL_HOST: 'http://localhost:3000/'\r\n    \r\n\r\n    GET_AUTH: 'https://ndtbfpup03.execute-api.ca-central-1.amazonaws.com/dev/api/get-auth-url',\r\n    GET_TOKEN: 'https://ndtbfpup03.execute-api.ca-central-1.amazonaws.com/dev/api/token/',\r\n    GET_EVENTS: 'https://ndtbfpup03.execute-api.ca-central-1.amazonaws.com/dev/api/get-events/',\r\n    GOOGLE_API: `https://www.googleapis.com/oauth2/v1/tokeninfo?`,\r\n    LOCAL_HOST: 'http://localhost:8080/'\r\n}\r\n\r\n\r\nexport default config;","import { mockData } from './mock-data';\r\nimport axios from 'axios';\r\nimport NProgress from 'nprogress';\r\nimport Config from './config';\r\nimport lastEvents from './lastEvents.json'\r\n\r\nexport const extractLocations = (events) => {\r\n  var extractLocations = events.map((event) => event.location);\r\n  var locations = [...new Set(extractLocations)];\r\n  return locations;\r\n};\r\n\r\nfunction setTest () {\r\n  const locationsX = [\"Santiago, Santiago Metropolitan Region, Chile\",\"California, USA\",\"Bangkok, Thailand\",\"Berlin, Germany\",\"Cape Town, South Africa\",\"New York, NY, USA\",\"Mumbai, Maharashtra, India\",\"London, UK\",\"Amsterdam, Netherlands\",\"Dubai - United Arab Emirates\",\"Toronto, ON, Canada\",\"Tokyo, Japan\",\"Nairobi, Kenya\",\"Sydney NSW, Australia\",\"Moscow, Russia\"];\r\n  localStorage.setItem('lastEvents', JSON.stringify(lastEvents));\r\n  localStorage.setItem('locations', JSON.stringify(locationsX));\r\n}\r\n\r\nexport const getEvents = async () => {\r\n  NProgress.start();\r\n\r\n  if(!localStorage.getItem('lastEvents')){\r\n    setTest();\r\n  }\r\n\r\n  // setTest();\r\n  if (window.location.href.startsWith('http://localhost')) {\r\n    NProgress.done();\r\n    // return mockData;\r\n  }\r\n\r\n  // offline ability to load old data\r\n  // if (!navigator.onLine) {\r\n    console.log('offline!')\r\n    const storedEvents = localStorage.getItem('lastEvents');\r\n    NProgress.done();\r\n    return JSON.parse(storedEvents).events;\r\n  // }\r\n\r\n  const token = await getAccessToken();\r\n\r\n  if (token) {\r\n    removeQuery();\r\n    const url = Config.GET_EVENTS + token;\r\n    const result = await axios.get(url);\r\n    if (result.data) {\r\n      var locations = extractLocations(result.data.events);\r\n      localStorage.setItem('lastEvents', JSON.stringify(result.data));\r\n      localStorage.setItem('locations', JSON.stringify(locations));\r\n    }\r\n    NProgress.done();\r\n    return result.data.events;\r\n  }\r\n};\r\n\r\nconst removeQuery = () => {\r\n  if (window.history.pushState && window.location.pathname) {\r\n    var newurl =\r\n      window.location.protocol +\r\n      '//' +\r\n      window.location.host +\r\n      window.location.pathname;\r\n    window.history.pushState('', '', newurl);\r\n  } else {\r\n    newurl = window.location.protocol + '//' + window.location.host;\r\n    window.history.pushState('', '', newurl);\r\n  }\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n  const accessToken = localStorage.getItem('access_token');\r\n  const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n  if (!accessToken || tokenCheck.error) {\r\n    await localStorage.removeItem('access_token');\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = await searchParams.get('code');\r\n    if (!code) {\r\n      const results = await axios.get(Config.GET_AUTH);\r\n      const { authUrl } = results.data;\r\n      return (window.location.href = authUrl);\r\n    }\r\n    return code && getToken(code);\r\n  }\r\n  return accessToken;\r\n}\r\n\r\nexport const checkToken = async (accessToken) => {\r\n  const result = await fetch(\r\n    `${Config.GOOGLE_API}access_token=${accessToken}`\r\n  )\r\n    .then((res) => res.json())\r\n    .catch((error) => error.json());\r\n\r\n  return result;\r\n}\r\n\r\nconst getToken = async (code) => {\r\n  removeQuery();\r\n  const encodeCode = encodeURIComponent(code);\r\n  const { access_token } = await fetch(\r\n    Config.GET_TOKEN + encodeCode\r\n  )\r\n    .then((res) => {\r\n      return res.json();\r\n    })\r\n    .catch((error) => error);\r\n\r\n  access_token && localStorage.setItem('access_token', access_token);\r\n\r\n  return access_token;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Config from './config'\r\n\r\nfunction Login() {\r\n    return (\r\n        <div className='App'>\r\n            <h1>Welcome to the Meet App</h1>\r\n            <h4>\r\n                Log in to see upcoming events around the world for full-stack developers\r\n            </h4>\r\n            <div className='button_cont' align='center'>\r\n                <div className='google-btn'>\r\n                    <div className='google-icon-wrapper'>\r\n                        <img\r\n                        className='google-icon'\r\n                        src='https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg'\r\n                        alt='Google sing-in'\r\n                        />\r\n                    </div>\r\n                    <a\r\n                    href={Config.GET_AUTH}\r\n                    rel='nofollow noopener'\r\n                    className='btn-text'\r\n                    >\r\n                        <b>Sign in with Google</b>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n            <a\r\n            href='https://glenzy.github.io/meet/privacy.html'\r\n            rel='nofollow noopener'\r\n            >\r\n                Privacy Policy\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\r\nimport {Nav, Navbar} from 'react-bootstrap';\r\nimport './App.css';\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\nimport NumberOfEvents from './NumberOfEvents';\r\nimport { extractLocations, getEvents, checkToken } from './api';\r\nimport './nprogress.css';\r\nimport Login from './Login';\r\nimport { WarningAlert } from './Alert';\r\nimport {\r\n  ScatterChart,\r\n  Scatter,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\nimport EventGenre from './EventGenre';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      events: [],\r\n      locations: [],\r\n      numberOfEvents: 12,\r\n      currentLocation: 'all',\r\n      tokenCheck: false,\r\n      warningText: '',\r\n      showCharts: true\r\n    }\r\n  }\r\n\r\n  updateEvents = (location, eventCount) => {\r\n\r\n    // offline warning\r\n    if(!navigator.onLine) {\r\n      this.setState({\r\n        warningText: 'You are offline and using old search results, the events loaded may not be the most up to date!'\r\n      });\r\n    } else {\r\n      this.setState({\r\n        warningText: ''\r\n      })\r\n    }\r\n\r\n    const {currentLocation, numberOfEvents} = this.state;\r\n    if (location) {\r\n      getEvents().then((events) => {\r\n        const locationEvents = \r\n          location === 'all'\r\n            ? events\r\n            : events.filter((event) => event.location === location);\r\n        const filteredEvents = locationEvents.slice(0, numberOfEvents);\r\n        this.setState({\r\n          events: filteredEvents,\r\n          currentLocation: location\r\n        });\r\n      });\r\n    } else {\r\n      getEvents().then((events) => {\r\n        const locationEvents = \r\n          currentLocation === 'all'\r\n            ? events\r\n            : events.filter((event) => event.location === currentLocation);\r\n        const filteredEvents = locationEvents.slice(0, eventCount);\r\n        this.setState({\r\n          events: filteredEvents,\r\n          numberOfEvents: eventCount\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    console.log('this.componentDidMount');\r\n    const storedEvents = localStorage.getItem('lastEvents');\r\n    console.log(storedEvents)\r\n    return \r\n    // google verification PDF task\r\n    const accessToken = localStorage.getItem('access_token');\r\n    const validToken = accessToken !== null \r\n      ? await checkToken(accessToken)\r\n      : false;\r\n    this.setState({ tokenCheck: validToken });\r\n    if(validToken === true) \r\n      this.updateEvents();\r\n      const searchParams = new URLSearchParams(window.location.search);\r\n      const code = searchParams.get('code');\r\n    this.mounted = true;\r\n    if (code && this.mounted === true && validToken === false){\r\n      this.setState({ tokenCheck: true });\r\n      this.updateEvents()\r\n    }\r\n\r\n\r\n    this.mounted = true;\r\n    console.log('about to get events');\r\n    getEvents().then((events) => {\r\n      console.log(events);\r\n      if(this.mounted) {\r\n      this.setState({ events, locations: extractLocations(events) }, () => (console.log(this.state)));\r\n      }\r\n    })\r\n    .catch(e => console.error(e))\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.mounted = false;\r\n  }\r\n\r\n  getData = () => {\r\n    const {locations, events} = this.state;\r\n    const data = locations.map((location) => {\r\n      const number = events.filter((event) => event.location === location).length\r\n      const city = location.split(',').shift()\r\n      return {city, number};\r\n    })\r\n    return data;\r\n  }\r\n\r\n  handleShowCharts = () => {\r\n    if(this.state.showCharts === false){\r\n      this.setState({showCharts: true});\r\n    } else {\r\n      this.setState({showCharts: false})\r\n    }\r\n  };\r\n\r\n\r\n  render() {\r\n    let {tokenCheck} = this.state;\r\n    const {locations, numberOfEvents, events} = this.state;\r\n    const showCharts = this.state.showCharts;\r\n    if(true){\r\n      return (\r\n        <h1>Hello world</h1>\r\n      )\r\n    }\r\n\r\n    return {tokenCheck} === false ? (\r\n      <div className='App'>\r\n        <Login />\r\n      </div>\r\n    ) : (\r\n      <div className='App'>\r\n        <Navbar variant='dark'  expand='md' fixed='top' className='color-nav'>\r\n          <Navbar.Brand className='brand' href='https://ksflynn007.github.io/meet-app/'>\r\n            Code Club\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav'/>\r\n          <Navbar.Collapse>\r\n            <Nav>\r\n              <Nav.Item>\r\n                <Nav.Link className='justify-content-end' href='https://ksflynn007.github.io/meet-app/privacy-policy.html'>Privacy Policy</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item className='header-welcome'>Welcome to the Code Club, please select a city below to find an event:</Nav.Item>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <WarningAlert text={this.state.warningText}/>\r\n\r\n        <CitySearch \r\n          locations={locations} \r\n          updateEvents={this.updateEvents}\r\n          />\r\n        <NumberOfEvents \r\n          numberOfEvents={numberOfEvents}\r\n          updateEvents={this.updateEvents}\r\n          />\r\n        \r\n        <div className='data-vis-wrapper'>\r\n          <div className='charts-collapsed'>\r\n          <p>Your search results at a glance:</p>\r\n          {!showCharts && (\r\n            <button className='charts-btn' onClick={this.handleShowCharts}>\r\n              See charts\r\n            </button>\r\n          )}\r\n          {showCharts && (\r\n            <button className='charts-btn' onClick={this.handleShowCharts}>\r\n              Hide charts\r\n            </button>\r\n          )}\r\n          </div>\r\n\r\n          {showCharts && (\r\n            <div className='charts-expanded'>\r\n            <EventGenre events={events} />\r\n\r\n          <ResponsiveContainer height={400}>\r\n          <ScatterChart margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\r\n            <CartesianGrid />\r\n\r\n            <XAxis type='category' dataKey='city' name='City'/>\r\n            <YAxis type='number' dataKey='number' name='Number of Events' allowDecimals={false}/>\r\n\r\n            <Tooltip/>\r\n            <Scatter data={this.getData()} fill='#ea21a2'/>\r\n          </ScatterChart>\r\n          </ResponsiveContainer>\r\n\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n\r\n        <EventList events={events}/>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as atatus from 'atatus-spa';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\n// serviceWorkerRegistration.unregister();\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\natatus.config('b9237718df5e45c39793ba2fadca9808').install();\r\n"],"sourceRoot":""}