{"version":3,"sources":["logo.svg","login-view/login.jsx","api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Login","checkToken","accessToken","a","fetch","then","res","json","catch","error","result","App","localStorage","getItem","validToken","this","setState","tokenCheck","updateEvents","searchParams","URLSearchParams","window","location","search","code","get","mounted","className","src","logo","alt","href","target","rel","React","Component","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"gQAAe,MAA0B,iC,qBC6B1BA,IC1BFC,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACDC,MAAK,sEACyCF,IAE9DG,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBC,OAAM,SAACC,GAAD,OAAWA,EAAMF,UALN,cAChBG,EADgB,0BAOfA,EAAOD,OAPQ,2CAAH,sDCGFE,E,8MAEnB,kCAAAR,EAAA,yDAEqC,QAD7BD,EAAcU,aAAaC,QAAQ,iBAD3C,gCAEkDZ,EAAWC,GAF7D,+CAE4E,EAF5E,OAEQY,EAFR,KAGEC,KAAKC,SAAS,CAAEC,WAAYH,KACV,IAAfA,GAAqBC,KAAKG,eACvBC,EAAe,IAAIC,gBAAgBC,OAAOC,SAASC,QACnDC,EAAOL,EAAaM,IAAI,QAE9BV,KAAKW,SAAU,EACXF,IAAyB,IAAjBT,KAAKW,UAAmC,IAAfZ,IACnCC,KAAKC,SAAS,CAACC,YAAY,IAC3BF,KAAKG,gBAXT,iD,0EAeA,WACE,OAME,aALA,CAKA,OAAKS,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,kC,GA9BuBC,IAAMC,aCMnBC,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAACkD,GACLA,EAAaC,gBAEdhD,OAAM,SAACC,GACNgD,QAAQhD,MAAMA,EAAMiD,YE/G5BnB,M","file":"static/js/main.43a2edf3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React from 'react';\r\n\r\nfunction Login() {\r\n    return(\r\n        <div className='App'>\r\n            <h1>Welcome to the Meet App</h1>\r\n            <h4>\r\n                Login to see upcoming events around the world for full-stack developer\r\n            </h4>\r\n            <div className='button_cont' align='center'>\r\n                <div class='google-btn'>\r\n                    <div class='google-icon-wrapper'>\r\n                        <img class=\"google-icon\"\r\n                            src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\"\r\n                            alt=\"Google sign-in\"\r\n                        />\r\n                    </div>\r\n                    <a href=\"https://xixfiq7och.execute-api.ca-central-1.amazonaws.com/dev/api/get-auth-url\" rel='nofollow noopener' class='btn-text'>\r\n                        <b>Sign in with Google</b>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n            <a href='https://KSFlynn007.github.io/meet-app/privacy.html' rel='nofollow noopener'>\r\n                Privacy Policy\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import axios from 'axios';\r\n\r\n// from the \"Verify the Meet App\" file\r\nexport const checkToken = async (accessToken) => {\r\n    const result = await fetch (\r\n        `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n        )\r\n        .then((res) => res.json())\r\n        .catch((error) => error.json());\r\n\r\n    return result.error ? false : true;\r\n    };\r\n\r\nconst getAccessToken = async () => {\r\n    const accessToken = await localStorage.getItem('access_token');\r\n    const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n    if (!accessToken || !tokenCheck) {\r\n        await localStorage.removeItem('access_token');\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const code = await searchParams.get('code');\r\n        if(!code) {\r\n        const results = await axios.get(\"https://xixfiq7och.execute-api.ca-central-1.amazonaws.com/dev/api/get-auth-url\");\r\n        const { authURL } = results.data;\r\n        return(window.location.href = authURL);\r\n        }\r\n        return code && getToken(code);\r\n    }\r\n    return accessToken;\r\n    ;}\r\n\r\nconst removeQuery = () => {\r\n    if (window.history.pushState && window.location.pathname) {\r\n        var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\r\n        window.history.pushState(\"\", \"\", newurl);\r\n    } else {\r\n        newurl = window.location.protocol + \"//\" + window.location.host;\r\n        window.history.pushState(\"\", \"\", newurl);\r\n    }\r\n};\r\n\r\nconst getToken = async (code) => {\r\n    removeQuery();\r\n    const encodeCode = encodeURIComponent(code);\r\n    const { access_token } = await fetch(`https://xixfiq7och.execute-api.ca-central-1.amazonaws.com/dev/api/token/${encodeCode}`)\r\n        .then((res) => {\r\n            return res.json();\r\n        })\r\n        .catch((error) => error);\r\n        access_token && localStorage.setItem(\"access_token\", access_token);\r\n\r\n        return access_token;\r\n};","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Login from './login-view/login';\r\nimport { getEvents, checkToken } from './api';\r\n\r\nexport default class App extends React.Component() {\r\n\r\n  async componentDidMount() {\r\n    const accessToken = localStorage.getItem(\"access_token\");\r\n    const validToken = accessToken !== null ? await checkToken(accessToken) : false;\r\n    this.setState({ tokenCheck: validToken });\r\n    if(validToken === true) this.updateEvents();\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = searchParams.get(\"code\");\r\n\r\n    this.mounted = true;\r\n    if (code && this.mounted === true && validToken === false) {\r\n      this.setState({tokenCheck: true});\r\n      this.updateEvents();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // tokenCheck === false ? (\r\n      //   <div className=\"App\">\r\n      //     <Login />\r\n      //   </div>\r\n      // ) : (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </header>\r\n      </div>\r\n      // )\r\n    );\r\n  }\r\n\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}